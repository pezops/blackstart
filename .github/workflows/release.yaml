name: Release

on:
  release:
    types: [published]

env:
  REGISTRY: ghcr.io
  REPO_NAME: ${{ github.repository }}
  RELEASE_VERSION: ${{ github.event.release.tag_name }}

jobs:
  ko-build-publish:
    name: Publish Container Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
      attestations: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.release.tag_name }}

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod

      - name: Setup ko
        uses: ko-build/setup-ko@v0.8

      - name: Install crane
        run: |
          # Install crane for digest resolution
          VERSION=$(curl -s "https://api.github.com/repos/google/go-containerregistry/releases/latest" | jq -r '.tag_name')
          go install github.com/google/go-containerregistry/cmd/crane@${VERSION}

      - name: Prepare version tag
        id: version
        run: |
          # Strip leading 'v' from tag for container image tag
          VERSION="${RELEASE_VERSION#v}"
          echo "tag=${VERSION}" >> "$GITHUB_OUTPUT"
          echo "Tag: ${VERSION}"

      - name: Build & publish image with ko (multi-arch)
        id: ko
        env:
          KO_DOCKER_REPO: ${{ env.REGISTRY }}/${{ env.REPO_NAME }}
          VERSION: ${{ steps.version.outputs.tag }}
        run: |
          # --bare => don't include the import path in the image name
          # --tags => apply your git tag (without 'v' prefix)
          # --platform=all uses KO_DEFAULTPLATFORMS
          IMAGE_REF=$(ko build --bare \
            --platform=all \
            --tags "${{ steps.version.outputs.tag }}" \
            ./cmd/blackstart)
          echo "image_ref=${IMAGE_REF}" >> "$GITHUB_OUTPUT"

      - name: Resolve image digest
        id: digest
        run: |
          # Resolve the manifest-list digest for signing/attestation
          # IMAGE_REF already contains the full reference with tag
          DIGEST=$(crane digest "${{ steps.ko.outputs.image_ref }}")
          echo "digest=${DIGEST}" >> "$GITHUB_OUTPUT"
          echo "full_ref=${{ env.REGISTRY }}/${{ env.REPO_NAME }}@${DIGEST}" >> "$GITHUB_OUTPUT"
          echo "Image digest: ${DIGEST}"

      - name: Install Cosign
        uses: sigstore/cosign-installer@v3.10.1

      - name: Sign image with Cosign (keyless via GitHub OIDC)
        run: cosign sign --yes "${{ steps.digest.outputs.full_ref }}"

      - name: Attest build provenance
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.REPO_NAME }}
          subject-digest: ${{ steps.digest.outputs.digest }}
          push-to-registry: true

      - name: Show published artifact
        run: |
          echo "Published:  ${{ steps.ko.outputs.image_ref }}:${{ steps.version.outputs.tag }}"
          echo "Digest:     ${{ steps.digest.outputs.digest }}"

  check-if-latest:
    name: Check if Latest Release
    if: github.event.release.prerelease == false
    runs-on: ubuntu-latest
    outputs:
      is_latest: ${{ steps.check.outputs.is_latest }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Check if tag matches main branch
        id: check
        run: |
          TAG_COMMIT=$(git rev-list -n 1 ${{ github.event.release.tag_name }})
          MAIN_COMMIT=$(git rev-list -n 1 origin/main)

          echo "Tag commit: ${TAG_COMMIT}"
          echo "Main commit: ${MAIN_COMMIT}"

          if [[ "${TAG_COMMIT}" == "${MAIN_COMMIT}" ]]; then
            echo "is_latest=true" >> $GITHUB_OUTPUT
          else
            echo "is_latest=false" >> $GITHUB_OUTPUT
          fi
