name: Lint and Test

on:
  pull_request:
    types: [ opened, synchronize, reopened ]
  push:
    branches:
      - main

permissions:
  contents: read
  pull-requests: read

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Checkout PR code
        uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version-file: 'go.mod'
          cache: true

      - name: Generate CRDs
        run: make crds

      - name: Check for are out of sync code
        run: |
          # Check if generated files are out of sync
          echo "::group::Check if generated files are out of sync"
          
          if [[ -n $(git status --porcelain) ]]; then
            echo "❌ Generated files are out of sync with the repository"
            echo "Please run 'make crds' locally and commit the changes"
            echo ""
            echo "Files with changes:"
            git status --porcelain
            echo ""
            echo "Diff:"
            git diff
            exit 1
          fi
          echo "✅ Generated files are up to date"
          echo "::endgroup::"

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v8

  test:
    name: Test
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Checkout PR code
        uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version-file: 'go.mod'
          cache: true

      - name: Run tests
        run: go test -v -race -coverprofile=coverage.out -covermode=atomic ./...

      - name: Upload coverage artifact
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-report
          path: coverage.out
          retention-days: 1

  upload-coverage:
    name: Upload Coverage
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: test
    if: always() && needs.test.result == 'success'
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Download coverage artifact
        uses: actions/download-artifact@v5
        with:
          name: coverage-report

      - name: Upload to Codecov
        uses: codecov/codecov-action@v5
        with:
          files: ./coverage.out
          flags: unittests
          use_oidc: 'true'

  # Summary job that will be used for branch protection
  lint-test-success:
    name: Lint and Test Success
    runs-on: ubuntu-latest
    timeout-minutes: 1
    needs: [ lint, test ]
    if: always()
    steps:
      - name: Check all jobs
        run: |
          if [[ "${{ needs.lint.result }}" != "success" ]]; then
            echo "❌ Lint job failed"
            exit 1
          fi
          
          if [[ "${{ needs.test.result }}" != "success" ]]; then
            echo "❌ Test job failed"
            exit 1
          fi
          
          echo "✅ All CI checks passed!"
